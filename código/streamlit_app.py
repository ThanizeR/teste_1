import streamlit as st
import numpy as np
from PIL import Image
from keras.models import load_model
import pandas as pd
from sklearn.ensemble._forest import ForestClassifier, ForestRegressor
import pickle
from PIL import Image
import tensorflow as tf
from streamlit_option_menu import option_menu
import os

def predict_malaria(img):
    img = img.resize((36,36))
    img = np.asarray(img)
    img = img.reshape((1,36,36,3))
    img = img.astype(np.float64)
    model = load_model("/Users/thanizeassuncaorodrigues/Documents/GitHub/DiagnoSys/models/malaria.h5")
    pred_probs = model.predict(img)[0]
    pred_class = np.argmax(pred_probs)
    pred_prob = pred_probs[pred_class]
    return pred_class, pred_prob

def predict_pneumonia(img):
    img = img.convert('L')
    img = img.resize((36,36))
    img = np.asarray(img)
    img = img.reshape((1,36,36,1))
    img = img / 255.0
    model = load_model("/Users/thanizeassuncaorodrigues/Documents/GitHub/DiagnoSys/models/pneumonia.h5")
    pred_probs = model.predict(img)[0]
    pred_class = np.argmax(pred_probs)
    pred_prob = pred_probs[pred_class]
    return pred_class, pred_prob


with open('/Users/thanizeassuncaorodrigues/Documents/GitHub/DiagnoSys/models/diabetes_model.sav', 'rb') as file:
    diabetes_model = pickle.load(file)

with open('/Users/thanizeassuncaorodrigues/Documents/GitHub/DiagnoSys/models/heart_disease_model.sav', 'rb') as file:
    heart_disease_model = pickle.load(file)

with open('/Users/thanizeassuncaorodrigues/Documents/GitHub/DiagnoSys/models/kidney-2.pkl', 'rb') as file:
    kidney_model = pickle.load(file)

with open('/Users/thanizeassuncaorodrigues/Documents/GitHub/DiagnoSys/models/liver.pkl', 'rb') as file:
    liver_model = pickle.load(file)

# Fun√ß√£o para prever problemas hep√°ticos
def predict_liver(age, gender, total_bilirubin, direct_bilirubin, alkaline_phosphotase,
                  alamine_aminotransferase, aspartate_aminotransferase, total_proteins,
                  albumin, albumin_and_globulin_ratio):
    # Formatar os dados de entrada para a previs√£o
    input_data = np.array([[age, gender, total_bilirubin, direct_bilirubin, alkaline_phosphotase,
                            alamine_aminotransferase, aspartate_aminotransferase, total_proteins,
                            albumin, albumin_and_globulin_ratio]])
    # Fazer a previs√£o
    prediction = liver_model.predict(input_data)
    return prediction[0]

with open('/Users/thanizeassuncaorodrigues/Documents/GitHub/DiagnoSys/models/breast_cancer_dataset.sav', 'rb') as file:
    breast_cancer_model = pickle.load(file)


logo = Image.open("/Users/thanizeassuncaorodrigues/Documents/GitHub/DiagnoSys/logo/MediScan.png")
# Cria√ß√£o de uma sidebar personalizada com √≠cones redondos
st.sidebar.image(logo, use_column_width=True)
st.sidebar.title("Menu")

menu = st.sidebar.radio(
    "Navega√ß√£o",
    ["üè† P√°gina Inicial", "ü¶ü Detec√ß√£o Malaria", " ü´Å Detec√ß√£o Pneumonia", "ü´Ä Problemas Card√≠acos", "üíß Problemas Renais", "üíâ Detec√ß√£o Diabetes","üß™ Problemas Hep√°ticos", "üéóÔ∏è C√¢ncer de Mama", "üìù Feedback dos Usu√°rios", "üìä Datasets Dispon√≠veis", "üìû Contato"]
)
# Fun√ß√£o para mapear sele√ß√£o de menu para p√°gina correspondente
def get_selected_page(menu):
    if menu == "üè† P√°gina Inicial":
        return "home"
    elif menu == "ü¶ü Detec√ß√£o Malaria":
        return "Malaria"
    elif menu == " ü´Å Detec√ß√£o Pneumonia":
        return "Pneumonia"
    elif menu == "ü´Ä Problemas Card√≠acos":
        return "Problemas Card√≠acos"
    elif menu == "üíß Problemas Renais":
        return "Problemas Renais"
    elif menu == "üíâ Detec√ß√£o Diabetes":
        return "Diabetes"
    elif menu == "üß™ Problemas Hep√°ticos":
        return "Problemas Hep√°ticos"
    elif menu == "üéóÔ∏è C√¢ncer de Mama":
        return "C√¢ncer de Mama"
    elif menu == "üìù Feedback dos Usu√°rios":
        return "feedback"
    elif menu == "üìä Datasets Dispon√≠veis":
        return "Datasets"
    elif menu == "üìû Contato":
            return "contato"
    
selected_page = get_selected_page(menu)


def main(selected_page):
    # Conte√∫do da p√°gina selecionada
    if selected_page == "home":
        st.title('Bem-vindo √† Aplica√ß√£o de Previs√£o de Anomalias M√©dicas')
        st.write("Este √© um projeto de previs√£o de diversas anomalias m√©dicas usando modelos de deep learning e machine learning.")

        st.write("√â importante observar que os modelos utilizados nesta aplica√ß√£o foram obtidos de reposit√≥rios p√∫blicos na internet e, portanto, sua confiabilidade pode variar.")

        st.write("Embora tenham sido treinados em grandes conjuntos de dados m√©dicos, √© fundamental lembrar que todas as previs√µes devem ser verificadas por profissionais de sa√∫de qualificados.")

        # Se√ß√£o de Perguntas Frequentes
        st.subheader("Perguntas Frequentes")

        # Lista de perguntas frequentes e respostas
        faq = [
            {
                "pergunta": "Como a previs√£o de anomalias √© feita?",
                "resposta": "A detec√ß√£o de pneumonia e mal√°ria √© feita usando uma rede neural convolucional (CNN), enquanto o restante das anomalias √© detectado por um modelo Random Forest. Al√©m disso, a previs√£o de c√¢ncer de mama √© realizada por meio de regress√£o log√≠stica.",
            },
            {
                "pergunta": "Os modelos s√£o precisos?",
                "resposta": "Os modelos foram treinados em grandes conjuntos de dados m√©dicos, mas lembre-se de que todas as previs√µes devem ser verificadas por profissionais de sa√∫de qualificados.",
            },
            {
                "pergunta": "Qual √© o prop√≥sito desta aplica√ß√£o?",
                "resposta": "Esta aplica√ß√£o foi desenvolvida para auxiliar na detec√ß√£o de diversas anomalias m√©dicas em imagens de diferentes partes do corpo.",
            },
            {
                "pergunta": "Quais tipos de anomalias m√©dicas podem ser detectadas?",
                "resposta": "Os modelos podem detectar v√°rias anomalias, incluindo pneumonia, mal√°ria, problemas card√≠acos, hep√°ticos, renais, e diabetes.",
            },
            {
                "pergunta": "Como fa√ßo para obter suporte t√©cnico?",
                "resposta": "Voc√™ pode obter suporte t√©cnico na se√ß√£o 'Feedback dos Usu√°rios' preenchendo o formul√°rio e descrevendo seu problema, ou acessando a se√ß√£o 'Contato' para envio de e-mails.",
            },
        ]

        # Exibi√ß√£o das perguntas frequentes
        for item in faq:
            with st.expander(item["pergunta"]):
                st.write(item["resposta"])


    elif selected_page ==  "Malaria":
        st.header("Previs√£o de Mal√°ria")
        uploaded_file = st.file_uploader("Fa√ßa o upload de uma imagem para previs√£o de mal√°ria", type=["jpg", "jpeg", "png"])
        
        if uploaded_file is not None:
            try:
                img = Image.open(uploaded_file)
                st.image(img, caption="Imagem enviada", use_column_width=True)
                pred_class, pred_prob = predict_malaria(img)
                
                if pred_class == 1:
                    st.write("Previs√£o: Infectado")
                    st.write(f"Probabilidade de Mal√°ria: {pred_prob * 100:.2f}%")
                else:
                    st.write("Previs√£o: N√£o est√° infectado")
                    st.write(f"Probabilidade de Sa√∫de: {pred_prob * 100:.2f}%")
                    
            except Exception as e:
                st.error(f"Erro ao prever Mal√°ria: {str(e)}")

    elif selected_page ==  "Pneumonia":
        st.header("Previs√£o de Pneumonia")
        uploaded_file = st.file_uploader("Fa√ßa o upload de uma imagem para previs√£o de pneumonia", type=["jpg", "jpeg", "png"])
        
        if uploaded_file is not None:
            try:
                img = Image.open(uploaded_file)
                st.image(img, caption="Imagem enviada", use_column_width=True)
                pred_class, pred_prob = predict_pneumonia(img)
                
                if pred_class == 1:
                    st.write("Previs√£o: Pneumonia")
                    st.write(f"Probabilidade de Pneumonia: {pred_prob * 100:.2f}%")
                else:
                    st.write("Previs√£o: Saud√°vel")
                    st.write(f"Probabilidade de Sa√∫de: {pred_prob * 100:.2f}%")
                    
            except Exception as e:
                st.error(f"Erro ao prever Pneumonia: {str(e)}")


    elif selected_page ==  "Problemas Card√≠acos":
        # T√≠tulo da p√°gina
        st.title('Previs√£o de Doen√ßas Card√≠acas')

        col1, col2, col3 = st.columns(3)

        with col1:
            age = st.text_input('Idade')

        with col2:
            sex = st.text_input('Sexo')

        with col3:
            cp = st.text_input('Tipos de Dor no Peito')

        with col1:
            trestbps = st.text_input('Press√£o Arterial de Repouso')

        with col2:
            chol = st.text_input('Colesterol S√©rico em mg/dl')

        with col3:
            fbs = st.text_input('A√ß√∫car no Sangue em Jejum > 120 mg/dl')

        with col1:
            restecg = st.text_input('Resultados Eletrocardiogr√°ficos em Repouso')

        with col2:
            thalach = st.text_input('Frequ√™ncia Card√≠aca M√°xima Alcan√ßada')

        with col3:
            exang = st.text_input('Angina Induzida por Exerc√≠cio')

        with col1:
            oldpeak = st.text_input('Depress√£o do ST induzida pelo exerc√≠cio')

        with col2:
            slope = st.text_input('Inclina√ß√£o do segmento ST de pico do exerc√≠cio')

        with col3:
            ca = st.text_input('Principais vasos coloridos por flourosopia')

        with col1:
            thal = st.text_input('thal: 0 = normal; 1 = defeito fixo; 2 = defeito revers√≠vel')

        # c√≥digo para previs√£o
        heart_diagnosis = ''

        # criando um bot√£o para previs√£o

        if st.button('Resultado do Teste de Doen√ßa Card√≠aca'):

            user_input = [age, sex, cp, trestbps, chol, fbs, restecg, thalach, exang, oldpeak, slope, ca, thal]

            user_input = [float(x) for x in user_input]

            heart_prediction = heart_disease_model.predict([user_input])

            if heart_prediction[0] == 1:
                heart_diagnosis = 'A pessoa est√° com doen√ßa card√≠aca'
            else:
                heart_diagnosis = 'A pessoa n√£o tem doen√ßa card√≠aca'

        st.success(heart_diagnosis)

    elif selected_page ==  "Problemas Renais":
        # T√≠tulo da p√°gina
        st.title('Previs√£o de Doen√ßa Renal')

        col1, col2, col3, col4, col5 = st.columns(5)

        with col1:
            age = st.text_input('Idade')

        with col2:
            blood_pressure = st.text_input('Press√£o Sangu√≠nea')

        with col3:
            specific_gravity = st.text_input('Gravidade Espec√≠fica')

        with col4:
            albumin = st.text_input('Albumina')

        with col5:
            sugar = st.text_input('A√ß√∫car')

        with col1:
            red_blood_cells = st.text_input('Gl√≥bulos Vermelhos')

        with col2:
            pus_cell = st.text_input('C√©lulas de Pus')

        with col3:
            pus_cell_clumps = st.text_input('Aglomerados de C√©lulas de Pus')

        with col4:
            bacteria = st.text_input('Bact√©rias')

        with col5:
            blood_glucose_random = st.text_input('Glicose no Sangue Aleat√≥ria')

        with col1:
            blood_urea = st.text_input('Ur√©ia Sangu√≠nea')

        with col2:
            serum_creatinine = st.text_input('Creatinina S√©rica')

        with col3:
            sodium = st.text_input('S√≥dio')

        with col4:
            potassium = st.text_input('Pot√°ssio')

        with col5:
            haemoglobin = st.text_input('Hemoglobina')

        with col1:
            packed_cell_volume = st.text_input('Volume de Hem√°cias')

        with col2:
            white_blood_cell_count = st.text_input('Contagem de Gl√≥bulos Brancos')

        with col3:
            red_blood_cell_count = st.text_input('Contagem de Gl√≥bulos Vermelhos')

        with col4:
            hypertension = st.text_input('Hipertens√£o')

        with col5:
            diabetes_mellitus = st.text_input('Diabetes Mellitus')

        with col1:
            coronary_artery_disease = st.text_input('Doen√ßa da Art√©ria Coron√°ria')

        with col2:
            appetite = st.text_input('Apetite')

        with col3:
            peda_edema = st.text_input('Edema Pedal')

        with col4:
            aanemia = st.text_input('Anemia')

        # c√≥digo para previs√£o
        kidney_diagnosis = ''

        # criando um bot√£o para previs√£o    
        if st.button("Resultado do Teste de Doen√ßa Renal"):

            user_input = [age, blood_pressure, specific_gravity, albumin, sugar, red_blood_cells, pus_cell,
                        pus_cell_clumps, bacteria, blood_glucose_random, blood_urea, serum_creatinine, sodium,
                        potassium, haemoglobin, packed_cell_volume, white_blood_cell_count, red_blood_cell_count,
                        hypertension, diabetes_mellitus, coronary_artery_disease, appetite, peda_edema,
                        aanemia]

            user_input = [float(x) for x in user_input]

            # Voc√™ precisa substituir esta linha pela sua l√≥gica de previs√£o real para doen√ßa renal
            kidney_prediction = kidney_model.predict([user_input])

            if kidney_prediction[0] == 1:
                kidney_diagnosis = "A pessoa tem Doen√ßa Renal"
            else:
                kidney_diagnosis = "A pessoa n√£o tem Doen√ßa Renal"

        st.success(kidney_diagnosis)

    elif selected_page ==  "Diabetes":
        # T√≠tulo da p√°gina
        st.title('Previs√£o de Diabetes')

        # obtendo os dados de entrada do usu√°rio
        col1, col2, col3 = st.columns(3)

        with col1:
            Pregnancies = st.text_input('N√∫mero de Gesta√ß√µes')

        with col2:
            Glucose = st.text_input('N√≠vel de Glicose')

        with col3:
            BloodPressure = st.text_input('Valor da Press√£o Arterial')

        with col1:
            SkinThickness = st.text_input('Valor da Espessura da Pele')

        with col2:
            Insulin = st.text_input('N√≠vel de Insulina')

        with col3:
            BMI = st.text_input('Valor do IMC')

        with col1:
            DiabetesPedigreeFunction = st.text_input('Valor da Fun√ß√£o de Pedigree de Diabetes')

        with col2:
            Age = st.text_input('Idade da Pessoa')


        # c√≥digo para previs√£o
        diab_diagnosis = ''

        # criando um bot√£o para previs√£o

        if st.button('Resultado do Teste de Diabetes'):

            user_input = [Pregnancies, Glucose, BloodPressure, SkinThickness, Insulin,
                        BMI, DiabetesPedigreeFunction, Age]

            user_input = [float(x) for x in user_input]

            diab_prediction = diabetes_model.predict([user_input])

            if diab_prediction[0] == 1:
                diab_diagnosis = 'A pessoa √© diab√©tica'
            else:
                diab_diagnosis = 'A pessoa n√£o √© diab√©tica'

        st.success(diab_diagnosis)
       
    elif selected_page == "Problemas Hep√°ticos":
            # T√≠tulo da p√°gina
            st.title("Previs√£o de Problemas Hep√°ticos")

            # Obtendo os dados de entrada do usu√°rio
            col1, col2, col3, col4, col5 = st.columns(5)
            
            with col1:
                age = st.text_input('Idade')
            with col2:
                gender = st.radio('G√™nero', ['Masculino', 'Feminino'])
            with col3:
                total_bilirubin = st.text_input('Bilirrubina Total')
            with col4:
                direct_bilirubin = st.text_input('Bilirrubina Direta')
            with col5:
                alkaline_phosphotase = st.text_input('Fosfatase Alcalina')
                
            col6, col7, col8, col9, col10 = st.columns(5)
            
            with col6:
                alamine_aminotransferase = st.text_input('Alanina Aminotransferase (ALT)')
            with col7:
                aspartate_aminotransferase = st.text_input('Aspartato Aminotransferase (AST)')
            with col8:
                total_proteins = st.text_input('Prote√≠nas Totais')
            with col9:
                albumin = st.text_input('Albumina')
            with col10:
                albumin_and_globulin_ratio = st.text_input('Raz√£o Albumina/Globulina')

            # Mapear a entrada de g√™nero para 0 ou 1
            gender_mapping = {'Masculino': 1, 'Feminino': 0}
            gender_code = gender_mapping[gender]

            # C√≥digo para a previs√£o
            liver_diagnosis = ''

            # Criando um bot√£o para previs√£o
            if st.button('Prever'):
                user_input = [age, gender_code, total_bilirubin, direct_bilirubin, alkaline_phosphotase,
                            alamine_aminotransferase, aspartate_aminotransferase, total_proteins,
                            albumin, albumin_and_globulin_ratio]

                user_input = [float(x) for x in user_input]

                liver_prediction = predict_liver(user_input)

                if liver_prediction[0] == 1:
                    liver_diagnosis = 'O paciente tem um problema hep√°tico.'
                else:
                    liver_diagnosis = 'O paciente n√£o tem um problema hep√°tico.'
                    st.write(liver_diagnosis)

            st.success(liver_diagnosis)

    elif selected_page == "C√¢ncer de Mama":
        # T√≠tulo da p√°gina
        st.title("Previs√£o de C√¢ncer de Mama")

        # Obtendo os dados de entrada do usu√°rio
        col1, col2, col3, col4, col5 = st.columns(5)
        with col1:
            i1 = st.text_input('Raio M√©dio', key='raio_medio')
            i6 = st.text_input('Concavidade M√©dia', key='concavidade_media')
            i11 = st.text_input('Textura Pior', key='textura_pior')
            i16 = st.text_input('Concavidade Pior', key='concavidade_pior')
            i21 = st.text_input('√Årea SE', key='area_se')
            i26 = st.text_input('Concavidade SE', key='concavidade_se')
        with col2:
            i2 = st.text_input('Textura M√©dia', key='textura_media')
            i7 = st.text_input('Pontos C√¥ncavos M√©dios', key='pontos_concavos_medios')
            i12 = st.text_input('Per√≠metro SE', key='perimetro_se')
            i17 = st.text_input('Simetria Pior', key='simetria_pior')
            i22 = st.text_input('√Årea Pior', key='area_pior')
            i27 = st.text_input('Simetria SE', key='simetria_se')
        with col3:
            i3 = st.text_input('Per√≠metro M√©dio', key='perimetro_medio')
            i8 = st.text_input('Simetria M√©dia', key='simetria_media')
            i13 = st.text_input('√Årea M√©dia', key='area_media')
            i18 = st.text_input('Dimens√£o Fractal M√©dia', key='dimensao_fractal_media')
            i23 = st.text_input('Suavidade Pior', key='suavidade_pior')
            i28 = st.text_input('Dimens√£o Fractal SE', key='dimensao_fractal_se')
        with col4:
            i4 = st.text_input('√Årea M√©dia', key='area_media_2')
            i9 = st.text_input('Raio SE', key='raio_se')
            i14 = st.text_input('Suavidade SE', key='suavidade_se')
            i19 = st.text_input('Textura SE', key='textura_se')
            i24 = st.text_input('Simetria Pior', key='simetria_pior_2')
            i29 = st.text_input('Raio Pior', key='raio_pior')
        with col5:
            i5 = st.text_input('Suavidade M√©dia', key='suavidade_media')
            i10 = st.text_input('√Årea SE', key='area_se_2')
            i15 = st.text_input('Raio Pior', key='raio_pior_2')
            i20 = st.text_input('Suavidade Pior', key='suavidade_pior_2')
            i25 = st.text_input('Concavidade SE', key='concavidade_se_2')
            i30 = st.text_input('Pontos C√¥ncavos Pior', key='pontos_concavos_pior')

         # C√≥digo para a previs√£o
        breast_diagnosis = ''

        # Criando um bot√£o para previs√£o
        if st.button('Prever'):
            # Convertendo os dados de entrada para ponto flutuante
            user_input = [float(i1), float(i2), float(i3), float(i4), float(i5),
                        float(i6), float(i7), float(i8), float(i9), float(i10),
                        float(i11), float(i12), float(i13), float(i14), float(i15),
                        float(i16), float(i17), float(i18), float(i19), float(i20),
                        float(i21), float(i22), float(i23), float(i24), float(i25),
                        float(i26), float(i27), float(i28), float(i29), float(i30)]

                # Realizando a previs√£o
            previsao_cancer_mama = breast_cancer_model.predict([user_input])

            if previsao_cancer_mama == 1:
                    breast_diagnosis = "O tumor √© maligno."
            else:
                    breast_diagnosis = "O tumor √© benigno."
                    st.write(breast_diagnosis)

        st.success(breast_diagnosis)


    elif selected_page == "feedback":
        st.title('Feedback dos Usu√°rios')
        st.subheader("Deixe o seu feedback sobre a aplica√ß√£o:")

        # Formul√°rio para coletar o feedback
        navegacao = st.slider(" Como voc√™ avaliaria a facilidade de encontrar as diferentes funcionalidades na aplica√ß√£o?", 1, 10, 5)
        design_interface = st.slider("Voc√™ achou o design da aplica√ß√£o visualmente atraente? ", 1, 10, 5)
        elementos = st.slider(" Os elementos de interface, como bot√µes e menus, eram intuitivos? ", 1, 10, 5)
        desempenho = st.slider("A aplica√ß√£o funcionou sem problemas durante o uso? ", 1, 10, 5)
        atraso = st.slider ("Houve algum atraso ou lentid√£o ao carregar as p√°ginas ou processar as solicita√ß√µes?", 1, 5, 10)
        utilidade = st.slider("Voc√™ encontrou as informa√ß√µes ou funcionalidades que estava procurando? ", 1, 10, 5)
        expectativas = st.slider(" A aplica√ß√£o atendeu √†s suas expectativas em termos de utilidade?", 1, 10, 5)
        sugestoes = st.text_area("Voc√™ tem alguma sugest√£o espec√≠fica para melhorar a aplica√ß√£o? ")
        recursos = st.text_area("Existem recursos adicionais que voc√™ gostaria de ver implementados? ")
        comentarios = st.text_area("H√° mais alguma coisa que voc√™ gostaria de compartilhar sobre sua experi√™ncia geral com a aplica√ß√£o?")

        nome = st.text_input("Nome:")
        email = st.text_input("E-mail:")
        telefone = st.text_input("Telefone:")
        mensagem = st.text_area("Mensagem:")

        if st.button("Enviar Feedback"):
            # Processar e armazenar o feedback 
            feedback = {
                "Navega√ß√£o": navegacao,
                "Design da Interface": design_interface,
                "Elementos": elementos,
                "Desempenho": desempenho,
                "atraso": atraso,
                "Utilidade": utilidade,
                "Expectativas": expectativas,
                "Sugest√µes de Melhoria": sugestoes,
                "Recursos": recursos,
                "Coment√°rios Adicionais": comentarios,
                "Nome": nome,
                "E-mail": email,
                "Telefone": telefone,
                "Mensagem": mensagem
            }

            # Armazenar o feedback em um banco de dados
            import sqlite3

            # Criar uma conex√£o com o banco de dados SQLite
            conn = sqlite3.connect('feedbackStreamlit.db')
            cursor = conn.cursor()

            # Criar a tabela de feedback se ela n√£o existir
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS feedback (
                    id INTEGER PRIMARY KEY,
                    navegacao INT,
                    design_interface INT,
                    elementos INT,
                    desempenho INT,
                    atraso INT,
                    utilidade INT,
                    sugestoes TEXT,
                    recursos TEXT,
                    comentarios TEXT,
                    nome TEXT,
                    email TEXT,
                    telefone TEXT,
                    mensagem TEXT
                )
            ''')

            cursor.execute('''
                INSERT INTO feedback (navegacao, design_interface, desempenho, atraso, utilidade, sugestoes, comentarios, nome, email, telefone, mensagem)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (navegacao, design_interface, desempenho, atraso, utilidade, sugestoes, comentarios, nome, email, telefone, mensagem))

            conn.commit()
            conn.close()

            st.success("Feedback enviado com sucesso!")

    elif selected_page == "Datasets":
        # T√≠tulo da p√°gina
        st.title('Datasets Dispon√≠veis')
        # Introdu√ß√£o
        st.write("Esta p√°gina cont√©m links para download e visualiza√ß√£o de datasets utilizados na aplica√ß√£o.")
        
        # Dicion√°rio com URLs dos datasets
        datasets = {
            "Dataset de Mal√°ria": "https://www.kaggle.com/datasets/iarunava/cell-images-for-detecting-malaria",
            "Dataset de Pneumonia": "https://www.kaggle.com/datasets/paultimothymooney/chest-xray-pneumonia",
            "Dataset de Doen√ßas Card√≠acas": "https://github.com/siddhardhan23/multiple-disease-prediction-streamlit-app/blob/main/dataset/heart.csv",
            "Dataset de Doen√ßas Renais": "https://www.kaggle.com/datasets/mansoordaku/ckdisease",
            "Dataset de Diabetes": "https://github.com/siddhardhan23/multiple-disease-prediction-streamlit-app/blob/main/dataset/diabetes.csv",
            "Dataset de Doen√ßas Hep√°ticas": "https://www.kaggle.com/datasets/uciml/indian-liver-patient-records",
            "Dataset de C√¢ncer de Mama": "https://www.kaggle.com/datasets/uciml/breast-cancer-wisconsin-data"
        }

        # Loop sobre os datasets para exibir links de download e bot√µes para visualiza√ß√£o
        for dataset_name, dataset_url in datasets.items():
            st.write(f"**{dataset_name}:**")
            st.markdown(f"[Download {dataset_name}]({dataset_url})")

    elif selected_page == "contato":
        st.title('Entre em Contato Conosco')
        st.write("Voc√™ pode entrar em contato conosco atrav√©s do seguinte e-mail:")
        st.write("E-mail de Contato: contato@exemplo.com")

if __name__ == "__main__":
    main(selected_page)
